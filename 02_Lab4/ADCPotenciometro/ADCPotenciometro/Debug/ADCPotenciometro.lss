
ADCPotenciometro.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000208  0000029c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000208  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800112  00800112  000002ae  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002ae  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000320  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000887  00000000  00000000  00000358  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006c0  00000000  00000000  00000bdf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000399  00000000  00000000  0000129f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000070  00000000  00000000  00001638  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000424  00000000  00000000  000016a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000174  00000000  00000000  00001acc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001c40  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e0       	ldi	r30, 0x08	; 8
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 31       	cpi	r26, 0x12	; 18
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e1       	ldi	r26, 0x12	; 18
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 31       	cpi	r26, 0x16	; 22
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 8e 00 	call	0x11c	; 0x11c <main>
  9e:	0c 94 02 01 	jmp	0x204	; 0x204 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_21>:
void setupADC(void);

//INTERRUPCIONES

//ADC 
ISR(ADC_vect){
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
  b2:	ef 93       	push	r30
  b4:	ff 93       	push	r31
	valoradc = ADCH; // Almacenar valor
  b6:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  ba:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <valoradc>
	ADCSRA |= (1<<ADIF); // Apagar bandera
  be:	ea e7       	ldi	r30, 0x7A	; 122
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	80 61       	ori	r24, 0x10	; 16
  c6:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC); //Volver a iniciar
  c8:	80 81       	ld	r24, Z
  ca:	80 64       	ori	r24, 0x40	; 64
  cc:	80 83       	st	Z, r24
}
  ce:	ff 91       	pop	r31
  d0:	ef 91       	pop	r30
  d2:	8f 91       	pop	r24
  d4:	0f 90       	pop	r0
  d6:	0f be       	out	0x3f, r0	; 63
  d8:	0f 90       	pop	r0
  da:	1f 90       	pop	r1
  dc:	18 95       	reti

000000de <setup>:

// OTRAS FUNCIONES
void setup(void){
	//ENTRADAS Y SALIDAS -----------------------
	//Entradas (PORTB será también salida)
	DDRB &= 0xF0;
  de:	84 b1       	in	r24, 0x04	; 4
  e0:	80 7f       	andi	r24, 0xF0	; 240
  e2:	84 b9       	out	0x04, r24	; 4
	PORTB |= 0xFF; //Pullups (Y estado incial de muxado)
  e4:	85 b1       	in	r24, 0x05	; 5
  e6:	8f ef       	ldi	r24, 0xFF	; 255
  e8:	85 b9       	out	0x05, r24	; 5
	
	//Salidas
	DDRD |= 0xFF; //Contador Binario
  ea:	9a b1       	in	r25, 0x0a	; 10
  ec:	8a b9       	out	0x0a, r24	; 10
	UCSR0B = 0;
  ee:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	PORTD = 0;
  f2:	1b b8       	out	0x0b, r1	; 11
	
	DDRC |= 0xFF; //7 Segmentos
  f4:	97 b1       	in	r25, 0x07	; 7
  f6:	87 b9       	out	0x07, r24	; 7
	PORTD = 0;
  f8:	1b b8       	out	0x0b, r1	; 11
  fa:	08 95       	ret

000000fc <setupADC>:
}

void setupADC(void){
	ADMUX = 0;
  fc:	ec e7       	ldi	r30, 0x7C	; 124
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	10 82       	st	Z, r1
	ADMUX |= (1<<REFS0)|(1<<ADLAR)|(1<<MUX2)|(1<<MUX1)|(1<<MUX0); //Vcc ref | Just. Izq. | Mux ADC7
 102:	80 81       	ld	r24, Z
 104:	87 66       	ori	r24, 0x67	; 103
 106:	80 83       	st	Z, r24
	ADCSRA = 0;
 108:	ea e7       	ldi	r30, 0x7A	; 122
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	10 82       	st	Z, r1
	ADCSRA |= (1<<ADIE)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0); //Int. En | Presc. 128 (125kHz)
 10e:	80 81       	ld	r24, Z
 110:	8f 60       	ori	r24, 0x0F	; 15
 112:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADEN); // Enable
 114:	80 81       	ld	r24, Z
 116:	80 68       	ori	r24, 0x80	; 128
 118:	80 83       	st	Z, r24
 11a:	08 95       	ret

0000011c <main>:
}

//PRINCIPAL
int main(void)
{
	cli();
 11c:	f8 94       	cli
	setup();
 11e:	0e 94 6f 00 	call	0xde	; 0xde <setup>
	setupADC();
 122:	0e 94 7e 00 	call	0xfc	; 0xfc <setupADC>
	sei();
 126:	78 94       	sei
	
	ADCSRA |= (1<<ADSC); //Primer inicio de ADC
 128:	ea e7       	ldi	r30, 0x7A	; 122
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	80 81       	ld	r24, Z
 12e:	80 64       	ori	r24, 0x40	; 64
 130:	80 83       	st	Z, r24
	
	while (1)
	{
		//Contador Binario --------------------------------------
		// Antirrebote
		estadosactuales = PINB;
 132:	83 b1       	in	r24, 0x03	; 3
 134:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <estadosactuales>
		if (estadosprevios!=estadosactuales)
 138:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <estadosprevios>
 13c:	89 17       	cp	r24, r25
 13e:	e9 f0       	breq	.+58     	; 0x17a <main+0x5e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 140:	8f e9       	ldi	r24, 0x9F	; 159
 142:	9f e0       	ldi	r25, 0x0F	; 15
 144:	01 97       	sbiw	r24, 0x01	; 1
 146:	f1 f7       	brne	.-4      	; 0x144 <main+0x28>
 148:	00 c0       	rjmp	.+0      	; 0x14a <main+0x2e>
 14a:	00 00       	nop
		{
			_delay_ms(10); //Lectura nueva
			estadosactuales = PINB;
 14c:	83 b1       	in	r24, 0x03	; 3
 14e:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <estadosactuales>
			if (estadosprevios!=estadosactuales)
 152:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <estadosprevios>
 156:	89 17       	cp	r24, r25
 158:	81 f0       	breq	.+32     	; 0x17a <main+0x5e>
			{ // Si son distintos determino los bits distintos
				if(!(PINB & 0x02)) //Si es PB1 se resta al contador
 15a:	19 99       	sbic	0x03, 1	; 3
 15c:	05 c0       	rjmp	.+10     	; 0x168 <main+0x4c>
				{
					contador--;
 15e:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <contador>
 162:	91 50       	subi	r25, 0x01	; 1
 164:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <contador>
				}//Fin Resta
				if(!(PINB & 0x01)){ // Si es PB0 se añade al contador
 168:	18 99       	sbic	0x03, 0	; 3
 16a:	05 c0       	rjmp	.+10     	; 0x176 <main+0x5a>
					contador++;
 16c:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <contador>
 170:	9f 5f       	subi	r25, 0xFF	; 255
 172:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <contador>
				}// Fin Suma
				estadosprevios = estadosactuales;
 176:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <estadosprevios>
			}//Fin Botones
		} //Fin Antirrebote
		
		//Alarma ------------------------------------------------
		if (valoradc > contador){
 17a:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <valoradc>
 17e:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <contador>
 182:	89 17       	cp	r24, r25
 184:	20 f4       	brcc	.+8      	; 0x18e <main+0x72>
			alarma = 0x10; // Si es mayor el ADC activa alarma
 186:	80 e1       	ldi	r24, 0x10	; 16
 188:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
 18c:	02 c0       	rjmp	.+4      	; 0x192 <main+0x76>
		}
		else{
			alarma = 0x00; //Si no, se desactiva
 18e:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <__data_end>
 192:	8f e5       	ldi	r24, 0x5F	; 95
 194:	9d e6       	ldi	r25, 0x6D	; 109
 196:	01 97       	sbiw	r24, 0x01	; 1
 198:	f1 f7       	brne	.-4      	; 0x196 <main+0x7a>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <main+0x80>
 19c:	00 00       	nop
		}
		
		//Despliegue secuencial ---------------------------------
		_delay_ms(70); // Cambio a 7 seg. 1
		PORTD = Tabla7seg[(valoradc & 0xF0)>>4];
 19e:	e0 91 13 01 	lds	r30, 0x0113	; 0x800113 <valoradc>
 1a2:	e2 95       	swap	r30
 1a4:	ef 70       	andi	r30, 0x0F	; 15
 1a6:	f0 e0       	ldi	r31, 0x00	; 0
 1a8:	e0 50       	subi	r30, 0x00	; 0
 1aa:	ff 4f       	sbci	r31, 0xFF	; 255
 1ac:	80 81       	ld	r24, Z
 1ae:	8b b9       	out	0x0b, r24	; 11
		PORTC = alarma;
 1b0:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 1b4:	88 b9       	out	0x08, r24	; 8
		PORTC |= 0b00000001;
 1b6:	88 b1       	in	r24, 0x08	; 8
 1b8:	81 60       	ori	r24, 0x01	; 1
 1ba:	88 b9       	out	0x08, r24	; 8
 1bc:	8f e5       	ldi	r24, 0x5F	; 95
 1be:	9d e6       	ldi	r25, 0x6D	; 109
 1c0:	01 97       	sbiw	r24, 0x01	; 1
 1c2:	f1 f7       	brne	.-4      	; 0x1c0 <main+0xa4>
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <main+0xaa>
 1c6:	00 00       	nop
		_delay_ms(70); // Cambio a 7 seg. 1 
		PORTD = Tabla7seg[valoradc & 0x0F];
 1c8:	e0 91 13 01 	lds	r30, 0x0113	; 0x800113 <valoradc>
 1cc:	ef 70       	andi	r30, 0x0F	; 15
 1ce:	f0 e0       	ldi	r31, 0x00	; 0
 1d0:	e0 50       	subi	r30, 0x00	; 0
 1d2:	ff 4f       	sbci	r31, 0xFF	; 255
 1d4:	80 81       	ld	r24, Z
 1d6:	8b b9       	out	0x0b, r24	; 11
		PORTC = alarma;
 1d8:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 1dc:	88 b9       	out	0x08, r24	; 8
		PORTC |= 0b00000010;
 1de:	88 b1       	in	r24, 0x08	; 8
 1e0:	82 60       	ori	r24, 0x02	; 2
 1e2:	88 b9       	out	0x08, r24	; 8
 1e4:	8f e5       	ldi	r24, 0x5F	; 95
 1e6:	9d e6       	ldi	r25, 0x6D	; 109
 1e8:	01 97       	sbiw	r24, 0x01	; 1
 1ea:	f1 f7       	brne	.-4      	; 0x1e8 <main+0xcc>
 1ec:	00 c0       	rjmp	.+0      	; 0x1ee <main+0xd2>
 1ee:	00 00       	nop
		_delay_ms(70); // Contador
		PORTD = contador;
 1f0:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <contador>
 1f4:	8b b9       	out	0x0b, r24	; 11
		PORTC = alarma;
 1f6:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 1fa:	88 b9       	out	0x08, r24	; 8
		PORTC |= 0b00000100;
 1fc:	88 b1       	in	r24, 0x08	; 8
 1fe:	84 60       	ori	r24, 0x04	; 4
 200:	88 b9       	out	0x08, r24	; 8
		
		
	}// Fin Main Loop
 202:	97 cf       	rjmp	.-210    	; 0x132 <main+0x16>

00000204 <_exit>:
 204:	f8 94       	cli

00000206 <__stop_program>:
 206:	ff cf       	rjmp	.-2      	; 0x206 <__stop_program>
